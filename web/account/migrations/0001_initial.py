# Generated by Django 4.2.10 on 2024-02-25 07:50

import uuid

import django.core.validators
import django.utils.timezone
from django.db import migrations, models

import account.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "id",
                    models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="id"),
                ),
                ("email", models.EmailField(max_length=100, unique=True, verbose_name="email")),
                (
                    "username",
                    models.CharField(default="Unknown", max_length=30, verbose_name="username"),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Man"), ("W", "Woman"), ("O", "Other")],
                        default=None,
                        max_length=1,
                        null=True,
                        verbose_name="gender",
                    ),
                ),
                (
                    "birthday",
                    models.DateField(blank=True, default=None, null=True, verbose_name="birthday"),
                ),
                (
                    "body_weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        default=None,
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(999.9),
                            django.core.validators.MinValueValidator(0.0),
                        ],
                        verbose_name="body weight (kg)",
                    ),
                ),
                (
                    "body_height",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        default=None,
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(999.9),
                            django.core.validators.MinValueValidator(0.0),
                        ],
                        verbose_name="body height (cm)",
                    ),
                ),
                ("is_staff", models.BooleanField(default=False, verbose_name="is staff")),
                ("is_active", models.BooleanField(default=False, verbose_name="is active")),
                ("is_superuser", models.BooleanField(default=False, verbose_name="is superuser")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="created at"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("objects", account.managers.UserManager()),
            ],
        ),
    ]
